<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @package map
 * @subpackage Classes
 * @author Eric Daniel <ehdaniel@gmail.com>
 * @version $Revision: 1591 $
 */

GalleryCoreApi::requireOnce('modules/core/AdminMaintenance.inc');
GalleryCoreApi::requireOnce('modules/map/classes/mapHelper.class');
GalleryCoreApi::requireOnce('modules/map/classes/GoogleMapUtilities.class');

/**
 * This is a MaintenanceTask that will write to the EXIF header of the file the GPS coordinates stored in the database if the header doesn't exist.
 *
 * @package map
 * @subpackage Classes
 */
class WriteExifHeaderToPictures extends MaintenanceTask {

    /**
     * @see MaintenanceTask::getInfo()
     */
    function getInfo() {
	global $gallery;

	$info['l10Domain'] = 'modules_map';
	$info['title'] = $gallery->i18n('Write GPS Information onto the EXIF header for the pictures');
	$info['description'] = $gallery->i18n(
		'This task will go through all the gallery items and populate the GPS information' . 
                ' in the EXIF headers for each JPEG if those don\'t already exist.');
	return $info;
    }

    /**
     * @see MaintenanceTask::run()
     */
    function run() {
	global $gallery;
	$templateAdapter =& $gallery->getTemplateAdapter();

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'map');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$query = '
            SELECT
              [PhotoItem::id], [mapMap::value]
            FROM
              [PhotoItem]
            INNER JOIN
              [DataItem] ON [PhotoItem::id] = [DataItem::id]
            INNER JOIN
              [mapMap] ON [mapMap::itemId] = [PhotoItem::id]
            WHERE
              [DataItem::mimeType] = \'image/jpeg\'
            AND
              [mapMap::field] = \'GPS\'
            ORDER BY [PhotoItem::id]';
	list ($ret, $result) = $gallery->search($query);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$ids = array();
	while ($res = $result->nextResult()) {
	    $ids[] = $res[0];
	}
	$totalitems = count($ids);
	$current = 1;
	$insertEXIFcoordinates = $module->translate('Inserting GPS coordinates into EXIF header');

	$ret = $templateAdapter->updateProgressBar($insertEXIFcoordinates,
		$module->translate(array('text' => 'Item %d of %d',
					 'arg1' => 0, 'arg2' => $totalitems)), 0);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $items) = GalleryCoreApi::loadEntitiesById($ids, 'GalleryPhotoItem');
	if ($ret) {
	    return array($ret, null);
	}
	list ($ret, $coorddata) = mapHelper::fetchFieldValues($items);
	if ($ret) {
	    return array($ret, null);
	}
	
	foreach ($items as $item) {

	    /* Check if EXIF Header exist */
	    list ($ret, $coords) = GoogleMapUtilities::getGPSCoordsFromExif($item);
	    if ($ret) {
	    	return array($ret, null);
	    }

	    if ($coords == null) {
		/* there are no existing GPS coords in the header, proceed */
	    	if (array_key_exists($item->getId(), $coorddata) && trim($coorddata[$item->getId()]['GPS']) != '') {
		    list($ret, $error, $status, $other) = 
			    GoogleMapUtilities::setGPSCoordsInExif($item, $coorddata[$item->getId()]['GPS']);
		    if ($ret) {
			return array($ret, null);
		    }
		}
	    }


	    $ret = $templateAdapter->updateProgressBar($insertEXIFcoordinates,
		    $module->translate(array('text' => 'Item %d of %d', 'arg1' => $current,
					     'arg2' => $totalitems)), $current / $totalitems);
	    if ($ret) {
		return array($ret, null);
	    }
	    $current++;
	}
	return array(null, true, 
		     array($module->translate('EXIF header information writen successfully')));
    }

    /**
     * @see MaintenanceTask::requiresProgressBar()
     */
    function requiresProgressBar() {
	return true;
    }
}
?>
